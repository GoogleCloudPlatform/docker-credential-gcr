// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GoogleCloudPlatform/docker-credential-gcr/config (interfaces: UserConfig)

// Package mock_config is a generated GoMock package.
package mock_config

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserConfig is a mock of UserConfig interface
type MockUserConfig struct {
	ctrl     *gomock.Controller
	recorder *MockUserConfigMockRecorder
}

// MockUserConfigMockRecorder is the mock recorder for MockUserConfig
type MockUserConfigMockRecorder struct {
	mock *MockUserConfig
}

// NewMockUserConfig creates a new mock instance
func NewMockUserConfig(ctrl *gomock.Controller) *MockUserConfig {
	mock := &MockUserConfig{ctrl: ctrl}
	mock.recorder = &MockUserConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserConfig) EXPECT() *MockUserConfigMockRecorder {
	return m.recorder
}

// DefaultToGCRAccessToken mocks base method
func (m *MockUserConfig) DefaultToGCRAccessToken() bool {
	ret := m.ctrl.Call(m, "DefaultToGCRAccessToken")
	ret0, _ := ret[0].(bool)
	return ret0
}

// DefaultToGCRAccessToken indicates an expected call of DefaultToGCRAccessToken
func (mr *MockUserConfigMockRecorder) DefaultToGCRAccessToken() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultToGCRAccessToken", reflect.TypeOf((*MockUserConfig)(nil).DefaultToGCRAccessToken))
}

// ResetAll mocks base method
func (m *MockUserConfig) ResetAll() error {
	ret := m.ctrl.Call(m, "ResetAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetAll indicates an expected call of ResetAll
func (mr *MockUserConfigMockRecorder) ResetAll() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetAll", reflect.TypeOf((*MockUserConfig)(nil).ResetAll))
}

// SetDefaultToGCRAccessToken mocks base method
func (m *MockUserConfig) SetDefaultToGCRAccessToken(arg0 bool) error {
	ret := m.ctrl.Call(m, "SetDefaultToGCRAccessToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDefaultToGCRAccessToken indicates an expected call of SetDefaultToGCRAccessToken
func (mr *MockUserConfigMockRecorder) SetDefaultToGCRAccessToken(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultToGCRAccessToken", reflect.TypeOf((*MockUserConfig)(nil).SetDefaultToGCRAccessToken), arg0)
}

// SetTokenSources mocks base method
func (m *MockUserConfig) SetTokenSources(arg0 []string) error {
	ret := m.ctrl.Call(m, "SetTokenSources", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTokenSources indicates an expected call of SetTokenSources
func (mr *MockUserConfigMockRecorder) SetTokenSources(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTokenSources", reflect.TypeOf((*MockUserConfig)(nil).SetTokenSources), arg0)
}

// TokenSources mocks base method
func (m *MockUserConfig) TokenSources() []string {
	ret := m.ctrl.Call(m, "TokenSources")
	ret0, _ := ret[0].([]string)
	return ret0
}

// TokenSources indicates an expected call of TokenSources
func (mr *MockUserConfigMockRecorder) TokenSources() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenSources", reflect.TypeOf((*MockUserConfig)(nil).TokenSources))
}
