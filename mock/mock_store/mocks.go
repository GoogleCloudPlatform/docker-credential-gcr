// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GoogleCloudPlatform/docker-credential-gcr/store (interfaces: GCRCredStore)

// Package mock_store is a generated GoMock package.
package mock_store

import (
	store "github.com/GoogleCloudPlatform/docker-credential-gcr/store"
	credentials "github.com/docker/docker-credential-helpers/credentials"
	gomock "github.com/golang/mock/gomock"
	oauth2 "golang.org/x/oauth2"
	reflect "reflect"
)

// MockGCRCredStore is a mock of GCRCredStore interface
type MockGCRCredStore struct {
	ctrl     *gomock.Controller
	recorder *MockGCRCredStoreMockRecorder
}

// MockGCRCredStoreMockRecorder is the mock recorder for MockGCRCredStore
type MockGCRCredStoreMockRecorder struct {
	mock *MockGCRCredStore
}

// NewMockGCRCredStore creates a new mock instance
func NewMockGCRCredStore(ctrl *gomock.Controller) *MockGCRCredStore {
	mock := &MockGCRCredStore{ctrl: ctrl}
	mock.recorder = &MockGCRCredStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGCRCredStore) EXPECT() *MockGCRCredStoreMockRecorder {
	return m.recorder
}

// AllThirdPartyCreds mocks base method
func (m *MockGCRCredStore) AllThirdPartyCreds() (map[string]credentials.Credentials, error) {
	ret := m.ctrl.Call(m, "AllThirdPartyCreds")
	ret0, _ := ret[0].(map[string]credentials.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllThirdPartyCreds indicates an expected call of AllThirdPartyCreds
func (mr *MockGCRCredStoreMockRecorder) AllThirdPartyCreds() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllThirdPartyCreds", reflect.TypeOf((*MockGCRCredStore)(nil).AllThirdPartyCreds))
}

// DeleteGCRAuth mocks base method
func (m *MockGCRCredStore) DeleteGCRAuth() error {
	ret := m.ctrl.Call(m, "DeleteGCRAuth")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGCRAuth indicates an expected call of DeleteGCRAuth
func (mr *MockGCRCredStoreMockRecorder) DeleteGCRAuth() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGCRAuth", reflect.TypeOf((*MockGCRCredStore)(nil).DeleteGCRAuth))
}

// DeleteOtherCreds mocks base method
func (m *MockGCRCredStore) DeleteOtherCreds(arg0 string) error {
	ret := m.ctrl.Call(m, "DeleteOtherCreds", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOtherCreds indicates an expected call of DeleteOtherCreds
func (mr *MockGCRCredStoreMockRecorder) DeleteOtherCreds(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOtherCreds", reflect.TypeOf((*MockGCRCredStore)(nil).DeleteOtherCreds), arg0)
}

// GetGCRAuth mocks base method
func (m *MockGCRCredStore) GetGCRAuth() (*store.GCRAuth, error) {
	ret := m.ctrl.Call(m, "GetGCRAuth")
	ret0, _ := ret[0].(*store.GCRAuth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGCRAuth indicates an expected call of GetGCRAuth
func (mr *MockGCRCredStoreMockRecorder) GetGCRAuth() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGCRAuth", reflect.TypeOf((*MockGCRCredStore)(nil).GetGCRAuth))
}

// GetOtherCreds mocks base method
func (m *MockGCRCredStore) GetOtherCreds(arg0 string) (*credentials.Credentials, error) {
	ret := m.ctrl.Call(m, "GetOtherCreds", arg0)
	ret0, _ := ret[0].(*credentials.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOtherCreds indicates an expected call of GetOtherCreds
func (mr *MockGCRCredStoreMockRecorder) GetOtherCreds(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOtherCreds", reflect.TypeOf((*MockGCRCredStore)(nil).GetOtherCreds), arg0)
}

// SetGCRAuth mocks base method
func (m *MockGCRCredStore) SetGCRAuth(arg0 *oauth2.Token) error {
	ret := m.ctrl.Call(m, "SetGCRAuth", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGCRAuth indicates an expected call of SetGCRAuth
func (mr *MockGCRCredStoreMockRecorder) SetGCRAuth(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGCRAuth", reflect.TypeOf((*MockGCRCredStore)(nil).SetGCRAuth), arg0)
}

// SetOtherCreds mocks base method
func (m *MockGCRCredStore) SetOtherCreds(arg0 *credentials.Credentials) error {
	ret := m.ctrl.Call(m, "SetOtherCreds", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOtherCreds indicates an expected call of SetOtherCreds
func (mr *MockGCRCredStoreMockRecorder) SetOtherCreds(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOtherCreds", reflect.TypeOf((*MockGCRCredStore)(nil).SetOtherCreds), arg0)
}
